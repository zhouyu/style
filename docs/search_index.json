[
["functions.html", "3 Functions 3.1 Naming 3.2 Long lines 3.3 return() 3.4 Comments 3.5 Design", " 3 Functions 3.1 Naming Use verbs for function names, where possible. # Good add_row() permute() # Bad row_adder() permutation() 3.2 Long lines If a function definition runs over multiple lines, indent the second line to where the definition starts. 使用下面Good方式 # Good long_function_name &lt;- function(a = &quot;a long argument&quot;, b = &quot;another argument&quot;, c = &quot;another long argument&quot;) { # As usual code is indented by two spaces. } # Bad long_function_name &lt;- function(a = &quot;a long argument&quot;, b = &quot;another argument&quot;, c = &quot;another long argument&quot;) { # Here it&#39;s hard to spot where the definition end and the # code begins } 3.3 return() Only use return() for early returns. Otherwise rely on R to return the result of the last evaluated expression. # Good find_abs &lt;- function(x, y){ if (x &gt; 0) return(x) x * -1 } add_two &lt;- function(x, y) { x + y } # Bad add_two &lt;- function(x, y) { return(x + y) } If your function is called primarily for its side-effects (like printing, plotting, or saving to disk), it should return the first argument invisibly. This makes it possible to use the function as part of a pipe. print methods should usually do this, like this example from httr: 好技巧！ print.url &lt;- function(x, ...) { cat(&quot;Url: &quot;, build_url(x), &quot;\\n&quot;, sep = &quot;&quot;) invisible(x) } 3.4 Comments 使用注释来解释为什么要这样写，而不是描述这是什么或怎么做的！ In code, use comments to explain the “why” not the “what” or “how”. Each line of a comment should begin with the comment symbol and a single space: #. 3.5 Design There are two main design principles to bear in mind: 一个函数应该做好一件事！一般20-30行。 A function should do one thing well. A function should be called either because it has side-effects or because it returns a value; not both. Strive to keep blocks within a function on one screen. 20-30 lines per function are common. For functions that are significantly longer, consider splitting it into smaller functions. 一个函数应该容易在隔离的情况下被理解，避免与外部耦合。 A function should be easily understandable in isolation. Avoid global options. If your function has a transient side-effect (i.e. you need to create a temporary file or set an option), clean up after yourself with on.exit(). "]
]
